/*******************************************************************************
 * Copyright IBM Corp. and others 2022
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at http://eclipse.org/legal/epl-2.0
 * or the Apache License, Version 2.0 which accompanies this distribution
 * and is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License, v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception [1] and GNU General Public
 * License, version 2 with the OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] https://openjdk.org/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mAnyTrue, \
   /* .name                    = */ "mAnyTrue", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int32, \
   /* .typeProperties          = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    test if any mask element is true */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mAllTrue, \
   /* .name                    = */ "mAllTrue", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int32, \
   /* .typeProperties          = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    test if all mask elements are true */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mmAnyTrue, \
   /* .name                    = */ "mmAnyTrue", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int32, \
   /* .typeProperties          = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    test if any mask element is true under mask*/ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mmAllTrue, \
   /* .name                    = */ "mmAllTrue", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int32, \
   /* .typeProperties          = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    test if all mask elements are true under mask*/ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mload, \
   /* .name                    = */ "mload", \
   /* .properties1             = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ILChildProp::NoChildren, \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    load mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mloadi, \
   /* .name                    = */ "mloadi", \
   /* .properties1             = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    load indirect mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mstore, \
   /* .name                    = */ "mstore", \
   /* .properties1             = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2             = */ ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeDef, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    store mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mstorei, \
   /* .name                    = */ "mstorei", \
   /* .properties1             = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2             = */ ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeDef, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ TWO_CHILD(TR::Address, ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    store indirect mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mTrueCount, \
   /* .name                    = */ "mTrueCount", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::MaskReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int64, \
   /* .typeProperties          = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    mask true count */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mFirstTrue, \
   /* .name                    = */ "mFirstTrue", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::MaskReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int64, \
   /* .typeProperties          = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    mask first true */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mLastTrue, \
   /* .name                    = */ "mLastTrue", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::MaskReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int64, \
   /* .typeProperties          = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    mask last true */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mToLongBits, \
   /* .name                    = */ "mToLongBits", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::MaskReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int64, \
   /* .typeProperties          = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    mask to long bits */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mLongBitsToMask, \
   /* .name                    = */ "mLongBitsToMask", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::MaskReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    long bits to mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mRegLoad, \
   /* .name                    = */ "mRegLoad", \
   /* .properties1             = */ ILProp1::LoadReg, \
   /* .properties2             = */ 0, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ILChildProp::NoChildren, \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    Load mask global register */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mRegStore, \
   /* .name                    = */ "mRegStore", \
   /* .properties1             = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2             = */ 0, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    Store mask global register */ \
)
// vector mask conversion opcodes
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ b2m, \
   /* .name                    = */ "b2m", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    convert byte into 1-element platform specific vector mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ s2m, \
   /* .name                    = */ "s2m", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    convert short into 2-element platform specific vector mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ i2m, \
   /* .name                    = */ "i2m", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    convert int into 4-element platform specific vector mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ l2m, \
   /* .name                    = */ "l2m", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    convert long into 4-element platform specific vector mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ m2b, \
   /* .name                    = */ "m2b", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int8, \
   /* .typeProperties          = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    convert 1-element platform specific vector mask into byte*/ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ m2s, \
   /* .name                    = */ "m2s", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int16, \
   /* .typeProperties          = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    convert 2-element platform specific vector mask into short*/ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ m2i, \
   /* .name                    = */ "m2i", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int32, \
   /* .typeProperties          = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    convert 4-element platform specific vector mask into int*/ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ m2l, \
   /* .name                    = */ "m2l", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int64, \
   /* .typeProperties          = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    convert 4-element platform specific vector mask into long*/ \
)
// vector opcodes
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vabs, \
   /* .name                    = */ "vabs", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::Abs, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector absolute value */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vadd, \
   /* .name                    = */ "vadd", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector add */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vand, \
   /* .name                    = */ "vand", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::And, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector logical AND */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vcall, \
   /* .name                    = */ "vcall", \
   /* .properties1             = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2             = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ILChildProp::Unspecified, \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    direct call returning a vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vcalli, \
   /* .name                    = */ "vcalli", \
   /* .properties1             = */ ILProp1::Indirect | ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2             = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ILChildProp::Unspecified, \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    indirect call returning a vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vdiv, \
   /* .name                    = */ "vdiv", \
   /* .properties1             = */ ILProp1::Div, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector divide */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vfma, \
   /* .name                    = */ "vfma", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector fused multiply and add */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vindexVector, \
   /* .name                    = */ "vindexVector", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ILChildProp::Unspecified, \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    Add the lanes of this vector to their corresponding lane numbers, scaled by a given constant. */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vload, \
   /* .name                    = */ "vload", \
   /* .properties1             = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ILChildProp::NoChildren, \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    load vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vloadi, \
   /* .name                    = */ "vloadi", \
   /* .properties1             = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    load indirect vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmax, \
   /* .name                    = */ "vmax", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative, \
   /* .properties2             = */ ILProp2::Max | ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise maximum */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmin, \
   /* .name                    = */ "vmin", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative, \
   /* .properties2             = */ ILProp2::Min | ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperatin   = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise minimum */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmul, \
   /* .name                    = */ "vmul", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector multiply */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vneg, \
   /* .name                    = */ "vneg", \
   /* .properties1             = */ ILProp1::Neg, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector negation */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vnot, \
   /* .name                    = */ "vnot", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector boolean not */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vor, \
   /* .name                    = */ "vor", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Or, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector logical OR */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vorUnchecked, \
   /* .name                    = */ "vorUnchecked", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Or, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    the same as vor but is valid for FP types as well*/ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vreductionAdd, \
   /* .name                    = */ "vreductionAdd", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector add reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vreductionAnd, \
   /* .name                    = */ "vreductionAnd", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector and reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vreductionFirstNonZero, \
   /* .name                    = */ "vreductionFirstNonZero", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector FirstNonZero reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vreductionMax, \
   /* .name                    = */ "vreductionMax", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector max reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vreductionMin, \
   /* .name                    = */ "vreductionMin", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector min reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vreductionMul, \
   /* .name                    = */ "vreductionMul", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector mul reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vreductionOr, \
   /* .name                    = */ "vreductionOr", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector or reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vreductionOrUnchecked, \
   /* .name                    = */ "vreductionOrUnchecked", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector or unchecked reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vreductionXor, \
   /* .name                    = */ "vreductionXor", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector xor reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vreturn, \
   /* .name                    = */ "vreturn", \
   /* .properties1             = */ ILProp1::Return | ILProp1::TreeTop, \
   /* .properties2             = */ ILProp2::MayUseSystemStack, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    return a vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vRegLoad, \
   /* .name                    = */ "vRegLoad", \
   /* .properties1             = */ ILProp1::LoadReg, \
   /* .properties2             = */ 0, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ILChildProp::NoChildren, \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    Load vector global register */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vRegStore, \
   /* .name                    = */ "vRegStore", \
   /* .properties1             = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2             = */ 0, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    Store vector global register */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vbitselect, \
   /* .name                    = */ "vbitselect", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector bit-wise select operator */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vsetelem, \
   /* .name                    = */ "vsetelem", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector set element */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vsplats, \
   /* .name                    = */ "vsplats", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ILChildProp::Unspecified, \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector splats */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vsqrt, \
   /* .name                    = */ "vsqrt", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::Floating_Point | ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector float/double square root */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vstore, \
   /* .name                    = */ "vstore", \
   /* .properties1             = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2             = */ ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeDef, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    store vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vstorei, \
   /* .name                    = */ "vstorei", \
   /* .properties1             = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2             = */ ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeDef, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_CHILD(TR::Address, ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    store indirect vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vsub, \
   /* .name                    = */ "vsub", \
   /* .properties1             = */ ILProp1::Sub, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector subtract */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vxor, \
   /* .name                    = */ "vxor", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Xor, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector exclusive OR integer */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vfirstNonZero, \
   /* .name                    = */ "vfirstNonZero", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int32, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    get first non-zero vector element */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vgetelem, \
   /* .name                    = */ "vgetelem", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    get vector element, returns scalar */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vpopcnt, \
   /* .name                    = */ "vpopcnt", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise bit count */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vcompress, \
   /* .name                    = */ "vcompress", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector compress based on mask: If mask element is set, corresponding element \
                                    of the input vector is placed into the resulting vector. Selected elements \
                                    are placed contiguously starting from lane 0 of the result vector. All other \
                                    elements of the result vector are set to zero. */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vexpand, \
   /* .name                    = */ "vexpand", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector expand based on mask: opposite of compress */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vshl, \
   /* .name                    = */ "vshl", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise left shift */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vshr, \
   /* .name                    = */ "vshr", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise right shift */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vushr, \
   /* .name                    = */ "vushr", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise unsigned right shift */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vrol, \
   /* .name                    = */ "vrol", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise rotate left */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ mcompress, \
   /* .name                    = */ "mcompress", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    mask compression: all set lanes of the input mask are compressed into \
                                    contiguous set of lanes in the output mask followed by unset lanes  */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vnotz, \
   /* .name                    = */ "vnotz", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise trailing zero count */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vnolz, \
   /* .name                    = */ "lnolz", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise leading zero count */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vbitswap, \
   /* .name                    = */ "vbitswap", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise reverse: equivalent to calling Integer.reverse() on each lane */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vbyteswap, \
   /* .name                    = */ "vbyteswap", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise reverse bytes: equivalent to calling Integer.reverseBytes()
                                    on each element */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vcompressbits, \
   /* .name                    = */ "vcompressbits", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise compress bits: equivalent to calling Integer.compress(a, b) \
                                    on each lane, where a and b are corresponding elements of the two vectors */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vexpandbits, \
   /* .name                    = */ "vexpandbits", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise expand bits: equivalent to calling Integer.expand(a, b) \
                                    on each lane, where a and b are corresponding elements of the two vectors */ \
)
//
// masked one-type operations
//
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmabs, \
   /* .name                    = */ "vmabs", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked absolute value */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmadd, \
   /* .name                    = */ "vmadd", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked add */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmand, \
   /* .name                    = */ "vmand", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked logical AND */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmdiv, \
   /* .name                    = */ "vmdiv", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked divide */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmfma, \
   /* .name                    = */ "vmfma", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ FOUR_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked fused multiply and add */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmindexVector, \
   /* .name                    = */ "vmindexVector", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ILChildProp::Unspecified, \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    Add the lanes of this vector to their corresponding lane numbers, \
                                    scaled by a given constant masked. */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmloadi, \
   /* .name                    = */ "vmloadi", \
   /* .properties1             = */ ILProp1::HasSymbolRef | ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE| ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_CHILD(TR::Address, ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    load masked indirect vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmmax, \
   /* .name                    = */ "vmmax", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked lanewise maximum */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmmin, \
   /* .name                    = */ "vmmin", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperatin   = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked lanewise minimum */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmmul, \
   /* .name                    = */ "vmmul", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked multiply */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmneg, \
   /* .name                    = */ "vmneg", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked negation */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmnot, \
   /* .name                    = */ "vmnot", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked boolean not */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmor, \
   /* .name                    = */ "vmor", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked logical OR */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmorUnchecked, \
   /* .name                    = */ "vmorUnchecked", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    the same as vmor but is valid for FP types as well*/ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmreductionAdd, \
   /* .name                    = */ "vmreductionAdd", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked add reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmreductionAnd, \
   /* .name                    = */ "vmreductionAnd", \
   /* .properties1             = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked and reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmreductionFirstNonZero, \
   /* .name                    = */ "vmreductionFirstNonZero", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked FirstNonZero reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmreductionMax, \
   /* .name                    = */ "vmreductionMax", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked max reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmreductionMin, \
   /* .name                    = */ "vmreductionMin", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked min reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmreductionMul, \
   /* .name                    = */ "vmreductionMul", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked mul reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmreductionOr, \
   /* .name                    = */ "vmreductionOr", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked or reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmreductionOrUnchecked, \
   /* .name                    = */ "vmreductionOrUnchecked", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked or unchecked reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmreductionXor, \
   /* .name                    = */ "vmreductionXor", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::VectorReduction, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked xor reduction */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmsqrt, \
   /* .name                    = */ "vmsqrt", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::Floating_Point | ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked float/double square root */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmstorei, \
   /* .name                    = */ "vmstorei", \
   /* .properties1             = */ ILProp1::TreeTop | ILProp1::HasSymbolRef | ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::MayUseSystemStack, \
   /* .properties3             = */ ILProp3::LikeDef, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_CHILD(TR::Address, ILChildProp::UnspecifiedChildType, ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    store masked indirect vector */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmsub, \
   /* .name                    = */ "vmsub", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked subtract */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmxor, \
   /* .name                    = */ "vmxor", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked exclusive OR integer */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmfirstNonZero, \
   /* .name                    = */ "vmfirstNonZero", \
   /* .properties1             = */ ILProp1::VectorMasked, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::Int32, \
   /* .typeProperties          = */ TR::NoType, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    get first non-zero vector element masked */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmpopcnt, \
   /* .name                    = */ "vmpopcnt", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise bit count with mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmshl, \
   /* .name                    = */ "vmshl", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise left shift with mask*/ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmshr, \
   /* .name                    = */ "vmshr", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise right shift with mask*/ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmushr, \
   /* .name                    = */ "vmushr", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise unsigned right shift with mask*/ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmrol, \
   /* .name                    = */ "vmrol", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise rotate left with mask*/ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmnotz, \
   /* .name                    = */ "vmnotz", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise trailing zero count with mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmnolz, \
   /* .name                    = */ "vmnolz", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise leading zero count with mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmbitswap, \
   /* .name                    = */ "vmbitswap", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise reverse with mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmbyteswap, \
   /* .name                    = */ "vmbyteswap", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::LikeUse, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise reverse bytes with mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmcompressbits, \
   /* .name                    = */ "vmcompressbits", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise compress bits with mask */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmexpandbits, \
   /* .name                    = */ "vmexpandbits", \
   /* .properties1             = */ 0, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector lanewise expand bits with mask */ \
)
//
// firstTwoTypeVectorOperation (has to match definition in OMRILOps.hpp)
//
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vcast, \
   /* .name                    = */ "vcast", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector to vector conversion. preserves bit pattern (noop), only changes datatype */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vconv, \
   /* .name                    = */ "vconv", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    convert vector elements to a new type (not a noop) */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ v2m, \
   /* .name                    = */ "v2m", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    convert boolean vector into platform specific vector mask with the same number of elements */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ m2v, \
   /* .name                    = */ "m2v", \
   /* .properties1             = */ ILProp1::Conversion, \
   /* .properties2             = */ ILProp2::ValueNumberShare, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::VectorResult, \
   /* .childProperties         = */ ONE_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vBadOperation, \
   /* .reverseBranchOperation  = */ TR::vBadOperation, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    convert platform specific vector mask into boolean vector with the same number of elements */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vcmpeq, \
   /* .name                    = */ "vcmpeq", \
   /* .properties1             = */ ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vcmpeq, \
   /* .reverseBranchOperation  = */ TR::vcmpne, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector compare equal  (return vector mask) */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vcmpne, \
   /* .name                    = */ "vcmpne", \
   /* .properties1             = */ ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vcmpne, \
   /* .reverseBranchOperation  = */ TR::vcmpeq, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector compare not equal  (return vector mask) */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vcmpgt, \
   /* .name                    = */ "vcmpgt", \
   /* .properties1             = */ ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vcmplt, \
   /* .reverseBranchOperation  = */ TR::vcmple, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector compare greater than */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vcmpge, \
   /* .name                    = */ "vcmpge", \
   /* .properties1             = */ ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vcmple, \
   /* .reverseBranchOperation  = */ TR::vcmplt, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector compare greater equal */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vcmplt, \
   /* .name                    = */ "vcmplt", \
   /* .properties1             = */ ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::CompareTrueIfLess, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vcmpgt, \
   /* .reverseBranchOperation  = */ TR::vcmpge, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector compare less than */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vcmple, \
   /* .name                    = */ "vcmple", \
   /* .properties1             = */ ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ TWO_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vcmpge, \
   /* .reverseBranchOperation  = */ TR::vcmpgt, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector compare less equal */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmcmpeq, \
   /* .name                    = */ "vmcmpeq", \
   /* .properties1             = */ ILProp1::VectorMasked | ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vmcmpeq, \
   /* .reverseBranchOperation  = */ TR::vmcmpne, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked compare equal  (return vector mask) */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmcmpne, \
   /* .name                    = */ "vmcmpne", \
   /* .properties1             = */ ILProp1::VectorMasked | ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vmcmpne, \
   /* .reverseBranchOperation  = */ TR::vmcmpeq, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked compare not equal  (return vector mask) */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmcmpgt, \
   /* .name                    = */ "vmcmpgt", \
   /* .properties1             = */ ILProp1::VectorMasked | ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vmcmplt, \
   /* .reverseBranchOperation  = */ TR::vmcmple, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked compare greater than */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmcmpge, \
   /* .name                    = */ "vmcmpge", \
   /* .properties1             = */ ILProp1::VectorMasked | ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vmcmple, \
   /* .reverseBranchOperation  = */ TR::vmcmplt, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked compare greater equal */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmcmplt, \
   /* .name                    = */ "vmcmplt", \
   /* .properties1             = */ ILProp1::VectorMasked | ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vmcmpgt, \
   /* .reverseBranchOperation  = */ TR::vmcmpge, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked compare less than */ \
)
VECTOR_OPERATION_MACRO(\
   /* .operation               = */ vmcmple, \
   /* .name                    = */ "vmcmple", \
   /* .properties1             = */ ILProp1::VectorMasked | ILProp1::BooleanCompare, \
   /* .properties2             = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3             = */ 0, \
   /* .properties4             = */ 0, \
   /* .dataType                = */ TR::NoType, \
   /* .typeProperties          = */ ILTypeProp::MaskResult, \
   /* .childProperties         = */ THREE_SAME_CHILD(ILChildProp::UnspecifiedChildType), \
   /* .swapChildrenOperation   = */ TR::vmcmpge, \
   /* .reverseBranchOperation  = */ TR::vmcmpgt, \
   /* .booleanCompareOpCode    = */ TR::BadILOp, \
   /* .ifCompareOpCode         = */ TR::BadILOp, \
   /* .description             =    vector masked compare less equal */ \
)
